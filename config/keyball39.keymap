#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q               &kp W     &kp E         &kp R  &kp T                                  &kp Y     &kp U  &kp I      &kp O    &kp P
&kp A               &kp S     &kp D         &kp F  &kp G                                  &kp H     &kp J  &kp K      &kp L    &kp SEMI
&kp Z               &kp X     &kp C         &kp V  &kp B                                  &kp N     &kp M  &kp COMMA  &kp DOT  &kp SLASH
&mt LCTRL CAPSLOCK  &kp LALT  &mt LGUI TAB  &to 1  &mt LSHFT MINUS  &kp SPACE  &kp ENTER  &kp BSPC                             &mt ESC CAPSLOCK
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                        &kp NUMBER_6          &kp NUMBER_7           &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&none         &none         &none         &kp UP_ARROW  &none                               &kp PLUS              &kp MINUS              &kp ASTERISK  &kp EQUAL     &kp COLON
&none         &none         &kp LEFT      &kp DOWN      &kp RIGHT                           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COMMA     &kp PERIOD    &kp SLASH
&kp CAPSLOCK  &trans        &kp TAB       &to 2         &to 0         &kp SPACE  &kp ENTER  &kp BSPC                                                                 &to 0
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                        &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&none            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none                              &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp SQT
&none            &none         &none         &none         &none                              &kp UNDERSCORE  &kp PLUS       &none             &none                 &mt NON_US_BACKSLASH SLASH
&kp CAPS         &trans        &trans        &to 3         &to 1        &kp SPACE  &kp ENTER  &kp BSPC                                                               &to 0
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &none                  &none   &none  &none  &none  &none
&kp F5  &kp F6   &kp F7   &kp F8   &none                  &none   &none  &none  &none  &none
&kp F9  &kp F10  &kp F11  &kp F12  &none                  &none   &none  &none  &none  &none
&trans  &trans   &trans   &to 4    &to 2  &trans  &trans  &trans                       &to 0
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp N1          &kp N2          &kp N3        &kp N4     &kp N5                  &kp N6         &kp N7     &kp N8     &kp N9     &kp N0
&kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none                   &kp PAGE_UP    &mkp LCLK  &mkp MCLK  &mkp RCLK  &none
&none           &none           &none         &none      &none                   &kp PAGE_DOWN  &none      &none      &none      &none
&trans          &trans          &trans        &to 5      &to 3   &trans  &trans  &trans                                          &to 0
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&none       &none  &none  &none  &none                &none      &none       &none       &none       &none
&bt BT_CLR  &none  &none  &none  &none                &bl BL_ON  &bl BL_OFF  &bl BL_INC  &bl BL_DEC  &bl BL_CYCLE
&none       &none  &none  &none  &none                &none      &none       &none       &none       &none
&none       &none  &none  &to 0  &to 4  &none  &none  &none                                          &to 0
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&none  &none  &none  &none  &none                &none  &none  &none  &none  &none
&none  &none  &none  &none  &none                &none  &none  &none  &none  &none
&none  &none  &none  &none  &none                &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none                       &none
            >;
        };
    };
};
